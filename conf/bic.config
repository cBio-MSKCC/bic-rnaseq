
process {
    executor = 'lsf'
}
executor.perJobMemLimit = true

plugins {
    id 'nf-co2footprint@1.0.0-beta' // carbon footprint plugin
}


manifest.version = '3.17.0_bic_1.0.0'

//general pipeline changes:
params {
    extra_star_align_args      = '--outSAMunmapped Within --outSAMattributes All --outFilterIntronMotifs RemoveNoncanonical'
}

// additional genomes (override igenomes if present)
params {
    genomes {
        "hg19_local" {
            fasta            = "/juno/bic/depot/assemblies/H.sapiens/hg19/hg19.fasta"
            star             = "/juno/bic/depot/assemblies/H.sapiens/hg19/index/star/2.7.11b/gencode_v46lift37_gtf"
            gtf              = "/juno/bic/depot/annotation/H.sapiens/gencode/v46/gencode.v46lift37.annotation.gtf"
            transcript_fasta = "/juno/bic/depot/annotation/H.sapiens/gencode/v46/gencode.v46lift37.transcripts.fa"
            mito_name        = "chrM"
            macs_gsize       = "2.7e9"
        }
        "hg19_cloud" {
            fasta       = "s3://bictestbucket/reference/hg19/hg19.fasta"
            gtf         = "s3://bictestbucket/reference/hg19/anno/Homo_sapiens.gencode.v18.annotation.gtf"
            mito_name   = "chrM"
            macs_gsize  = "2.7e9"
        }
        "mm10_local" {
            fasta       = "/juno/bic/depot/assemblies/M.musculus/mm10/mm10.fasta"
            gtf         = "/juno/bic/depot/annotation/M.musculus/gencode/vM23/gencode.vM23.annotation.gtf"
            transcript_fasta = "/juno/bic/depot/annotation/M.musculus/gencode/vM23/gencode.vM23.transcripts.fa"
            mito_name   = "chrM"
            macs_gsize  = "2.6e9"
        }
    }
}



//
// ******************************** output paths ********************************
//





//
// HTSEQ quanitfication options
//
if(!params.skip_alignment && params.aligner == 'star_htseq') {
    process {
        withName: '.*:ALIGN_STAR:STAR_ALIGN|.*:ALIGN_STAR:STAR_ALIGN_IGENOMES' {
            ext.args   = {
                    // Function to convert argument strings into a map
                    def argsToMap = { String args ->
                        args.split("\\s(?=--)").collectEntries {
                            def parts = it.trim().split(/\s+/, 2)
                            [(parts.first()): parts.last()]
                        }
                    }

                    // Initialize the map with preconfigured values
                    def preset_args_map = argsToMap("""
                        --quantMode TranscriptomeSAM GeneCounts
                        --twopassMode Basic
                        --outSAMtype BAM Unsorted
                        --readFilesCommand zcat
                        --runRNGseed 0
                        --outFilterMultimapNmax 20
                        --alignSJDBoverhangMin 1
                        --outSAMstrandField intronMotif
                        ${params.save_unaligned || params.contaminant_screening ? '--outReadsUnmapped Fastx' : ''}
                    """.trim())

                    // Consolidate the extra arguments
                    def final_args_map = preset_args_map + (params.extra_star_align_args ? argsToMap(params.extra_star_align_args) : [:])

                    // Convert the map back to a list and then to a single string
                    final_args_map.collect { key, value -> "${key} ${value}" }.join(' ').trim()
            }
            publishDir = [
                [
                    path: { "${params.outdir}/${params.aligner}/log" },
                    mode: params.publish_dir_mode,
                    pattern: '*.{out,tab}'
                ],
                [
                    path: { params.save_align_intermeds ? "${params.outdir}/${params.aligner}" : params.outdir },
                    mode: params.publish_dir_mode,
                    pattern: '*.bam',
                    saveAs: { params.save_align_intermeds ? it : null }
                ],
                [
                    path: { params.save_unaligned ? "${params.outdir}/${params.aligner}/unmapped" : params.outdir },
                    mode: params.publish_dir_mode,
                    pattern: '*.fastq.gz',
                    saveAs: { params.save_unaligned ? it : null }
                ]
            ]
        }

        withName: 'NFCORE_RNASEQ:RNASEQ:.*:BAM_SORT_STATS_SAMTOOLS:BAM_STATS_SAMTOOLS:.*' {
            ext.prefix = { "${meta.id}.sorted.bam" }
            publishDir = [
                path: { "${params.outdir}/${params.aligner}/alignment_metrics/samtools_stats" },
                mode: params.publish_dir_mode,
                pattern: "*.{stats,flagstat,idxstats}"
            ]
        }

        withName: '.*:HTSEQ_COUNT' {
            def strandmap = [unstranded: "no", forward: "yes", reverse: "reverse"]

            ext.args   = { [
                '-m intersection-strict',
                '-s', strandmap["${meta.strandedness}"],
                '-n', "${task.cpus}",
                '-r', 'pos',
                '--type=exon',
                '--additional-attr=gene_name'
            ].join(' ').trim() }
            publishDir = [
                path: { "${params.outdir}/${params.aligner}/htseq" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: '.*:HTSEQ_MERGE_COUNTS' {
            publishDir = [
                path: { "${params.outdir}/${params.aligner}/htseq" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }

    // I'm not sure if this part works, but I will leave it just in case. If someone does want to run this
    // with umi, we need to look this over.
    if (params.with_umi) {
        process {
            withName: 'NFCORE_RNASEQ:RNASEQ:SAMTOOLS_SORT' {
                publishDir = [
                    path: { params.save_align_intermeds || params.save_umi_intermeds ? "${params.outdir}/${params.aligner}" : params.outdir },
                    mode: params.publish_dir_mode,
                    pattern: '*.bam',
                    saveAs: { params.save_align_intermeds || params.save_umi_intermeds ? it : null }
                ]
            }

            withName: 'NFCORE_RNASEQ:RNASEQ:UMITOOLS_PREPAREFORSALMON' {
                publishDir = [
                    [
                        path: { "${params.outdir}/${params.aligner}/umitools/log" },
                        mode: params.publish_dir_mode,
                        pattern: '*.log'
                    ],
                    [
                        path: { params.save_align_intermeds || params.save_umi_intermeds ? "${params.outdir}/${params.aligner}" : params.outdir },
                        mode: params.publish_dir_mode,
                        pattern: '*.bam',
                        saveAs: { params.save_align_intermeds || params.save_umi_intermeds ? it : null }
                    ]
                ]
            }

            withName: 'NFCORE_RNASEQ:RNASEQ:BAM_SORT_STATS_SAMTOOLS:SAMTOOLS_SORT' {
                publishDir = [
                    path: { params.save_align_intermeds || params.save_umi_intermeds ? "${params.outdir}/${params.aligner}" : params.outdir },
                    mode: params.publish_dir_mode,
                    pattern: '*.bam',
                    saveAs: { params.save_align_intermeds || params.save_umi_intermeds ? it : null }
                ]
            }

            withName: 'NFCORE_RNASEQ:RNASEQ:BAM_SORT_STATS_SAMTOOLS:SAMTOOLS_INDEX' {
                publishDir = [
                    path: { params.save_align_intermeds || params.save_umi_intermeds ? "${params.outdir}/${params.aligner}" : params.outdir },
                    mode: params.publish_dir_mode,
                    pattern: '*.bai',
                    saveAs: { params.save_align_intermeds || params.save_umi_intermeds ? it : null }
                ]
            }

            withName: 'NFCORE_RNASEQ:RNASEQ:BAM_SORT_STATS_SAMTOOLS:BAM_STATS_SAMTOOLS:.*' {
                publishDir = [
                    path: { params.save_align_intermeds || params.save_umi_intermeds ? "${params.outdir}/${params.aligner}/alignment_metrics/samtools_stats" : params.outdir },
                    mode: params.publish_dir_mode,
                    pattern: '*.{stats,flagstat,idxstats}',
                    saveAs: { params.save_align_intermeds || params.save_umi_intermeds ? it : null }
                ]
            }

            withName: '.*:BAM_DEDUP_STATS_SAMTOOLS_UMITOOLS_TRANSCRIPTOME:UMITOOLS_DEDUP' {
                publishDir = [
                    [
                        path: { "${params.outdir}/${params.aligner}/umitools" },
                        mode: params.publish_dir_mode,
                        pattern: '*.tsv'
                    ],
                    [
                        path: { params.save_align_intermeds || params.save_umi_intermeds ? "${params.outdir}/${params.aligner}" : params.outdir },
                        mode: params.publish_dir_mode,
                        pattern: '*.bam',
                        saveAs: { params.save_align_intermeds || params.save_umi_intermeds ? it : null }
                    ]
                ]
            }

            withName: '.*:BAM_DEDUP_STATS_SAMTOOLS_UMITOOLS_TRANSCRIPTOME:SAMTOOLS_INDEX' {
                publishDir = [
                    path: { params.save_align_intermeds || params.save_umi_intermeds ? "${params.outdir}/${params.aligner}" : params.outdir },
                    mode: params.publish_dir_mode,
                    pattern: '*.bai',
                    saveAs: { params.save_align_intermeds || params.save_umi_intermeds ? it : null }
                ]
            }

            withName: '.*:BAM_DEDUP_STATS_SAMTOOLS_UMITOOLS_TRANSCRIPTOME:BAM_STATS_SAMTOOLS:.*' {
                publishDir = [
                    path: { "${params.outdir}/${params.aligner}/alignment_metrics/samtools_stats" },
                    mode: params.publish_dir_mode,
                    pattern: '*.{stats,flagstat,idxstats}'
                ]
            }
        }
    }
}

//
// fastqc
//
if (!(params.skip_fastqc || params.skip_qc)) {
    process {
        withName: '.*:FASTQ_FASTQC_UMITOOLS_TRIMGALORE:FASTQC' {
            publishDir = [
                path: { "${params.outdir}/metrics/fastqc" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}


//
// subworkflow nf-core/bam_markduplicates_picard 
// just overwriting the publish dirs
//

if (!params.skip_alignment) {
    if (!params.skip_markduplicates && !params.with_umi) {
        process {
            withName: '.*:BAM_MARKDUPLICATES_PICARD:PICARD_MARKDUPLICATES' {
                publishDir = [
                    [
                        path: { "${params.outdir}/${params.aligner}/alignment_metrics/picard_metrics" },
                        mode: params.publish_dir_mode,
                        pattern: '*metrics.txt'
                    ],
                    [
                        path: { "${params.outdir}/${params.aligner}/alignment" },
                        mode: params.publish_dir_mode,
                        pattern: '*.bam'
                    ]
                ]
            }

            withName: '.*:BAM_MARKDUPLICATES_PICARD:SAMTOOLS_INDEX' {
                publishDir = [
                    path: { "${params.outdir}/${params.aligner}/alignment" },
                    mode: params.publish_dir_mode,
                    pattern: '*.{bai,csi}'
                ]
            }

            withName: '.*:BAM_MARKDUPLICATES_PICARD:BAM_STATS_SAMTOOLS:.*' {
                publishDir = [
                    path: { "${params.outdir}/${params.aligner}/alignment_metrics/samtools_stats" },
                    mode: params.publish_dir_mode,
                    pattern: '*.{stats,flagstat,idxstats}'
                ]
            }
        }
    }
}

// dupbrader
if (!params.skip_alignment && !params.skip_qc) {
    if (!params.skip_dupradar) {
        process {
            withName: 'DUPRADAR' {
                publishDir = [
                    [
                        path: { "${params.outdir}/${params.aligner}/alignment_metrics/dupradar/scatter_plot" },
                        mode: params.publish_dir_mode,
                        pattern: "*Dens.pdf"
                    ],
                    [
                        path: { "${params.outdir}/${params.aligner}/alignment_metrics/dupradar/box_plot" },
                        mode: params.publish_dir_mode,
                        pattern: "*Boxplot.pdf"
                    ],
                    [
                        path: { "${params.outdir}/${params.aligner}/alignment_metrics/dupradar/histogram" },
                        mode: params.publish_dir_mode,
                        pattern: "*Hist.pdf"
                    ],
                    [
                        path: { "${params.outdir}/${params.aligner}/alignment_metrics/dupradar/gene_data" },
                        mode: params.publish_dir_mode,
                        pattern: "*Matrix.txt"
                    ],
                    [
                        path: { "${params.outdir}/${params.aligner}/alignment_metrics/dupradar/intercepts_slope" },
                        mode: params.publish_dir_mode,
                        pattern: "*slope.txt"
                    ]
                ]
            }
        }
    }
}

//
// RSEQC
//

def rseqc_modules = params.rseqc_modules ? params.rseqc_modules.split(',').collect{ it.trim().toLowerCase() } : []

if (!params.skip_alignment && !params.skip_qc && !params.skip_rseqc) {
    if ('bam_stat' in rseqc_modules) {
        process {
            withName: '.*:BAM_RSEQC:RSEQC_BAMSTAT' {
                publishDir = [
                    path: { "${params.outdir}/${params.aligner}/alignment_metrics/rseqc/bam_stat" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }
        }
    }

    if ('infer_experiment' in rseqc_modules) {
        process {
            withName: '.*:BAM_RSEQC:RSEQC_INFEREXPERIMENT' {
                publishDir = [
                    path: { "${params.outdir}/${params.aligner}/alignment_metrics/rseqc/infer_experiment" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }
        }
    }

    if ('junction_annotation' in rseqc_modules) {
        process {
            withName: '.*:BAM_RSEQC:RSEQC_JUNCTIONANNOTATION' {
                publishDir = [
                    [
                        path: { "${params.outdir}/${params.aligner}/alignment_metrics/rseqc/junction_annotation/pdf" },
                        mode: params.publish_dir_mode,
                        pattern: '*.pdf'
                    ],
                    [
                        path: { "${params.outdir}/${params.aligner}/alignment_metrics/rseqc/junction_annotation/bed" },
                        mode: params.publish_dir_mode,
                        pattern: '*.bed'
                    ],
                    [
                        path: { "${params.outdir}/${params.aligner}/alignment_metrics/rseqc/junction_annotation/xls" },
                        mode: params.publish_dir_mode,
                        pattern: '*.xls'
                    ],
                    [
                        path: { "${params.outdir}/${params.aligner}/alignment_metrics/rseqc/junction_annotation/log" },
                        mode: params.publish_dir_mode,
                        pattern: '*.log'
                    ],
                    [
                        path: { "${params.outdir}/${params.aligner}/alignment_metrics/rseqc/junction_annotation/rscript" },
                        mode: params.publish_dir_mode,
                        pattern: '*.r'
                    ]
                ]
            }
        }
    }

    if ('junction_saturation' in rseqc_modules) {
        process {
            withName: '.*:BAM_RSEQC:RSEQC_JUNCTIONSATURATION' {
                publishDir = [
                    [
                        path: { "${params.outdir}/${params.aligner}/alignment_metrics/rseqc/junction_saturation/pdf" },
                        mode: params.publish_dir_mode,
                        pattern: '*.pdf'
                    ],
                    [
                        path: { "${params.outdir}/${params.aligner}/alignment_metrics/rseqc/junction_saturation/rscript" },
                        mode: params.publish_dir_mode,
                        pattern: '*.r'
                    ]
                ]
            }
        }
    }

    if ('read_duplication' in rseqc_modules) {
        process {
            withName: '.*:BAM_RSEQC:RSEQC_READDUPLICATION' {
                publishDir = [
                    [
                        path: { "${params.outdir}/${params.aligner}/alignment_metrics/rseqc/read_duplication/pdf" },
                        mode: params.publish_dir_mode,
                        pattern: '*.pdf'
                    ],
                    [
                        path: { "${params.outdir}/${params.aligner}/alignment_metrics/rseqc/read_duplication/xls" },
                        mode: params.publish_dir_mode,
                        pattern: '*.xls'
                    ],
                    [
                        path: { "${params.outdir}/${params.aligner}/alignment_metrics/rseqc/read_duplication/rscript" },
                        mode: params.publish_dir_mode,
                        pattern: '*.r'
                    ]
                ]
            }
        }
    }

    if ('read_distribution' in rseqc_modules && !params.bam_csi_index) {
        process {
            withName: '.*:BAM_RSEQC:RSEQC_READDISTRIBUTION' {
                publishDir = [
                    path: { "${params.outdir}/${params.aligner}/alignment_metrics/rseqc/read_distribution" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }
        }
    }

    if ('inner_distance' in rseqc_modules && !params.bam_csi_index) {
        process {
            withName: '.*:BAM_RSEQC:RSEQC_INNERDISTANCE' {
                publishDir = [
                    [
                        path: { "${params.outdir}/${params.aligner}/alignment_metrics/rseqc/inner_distance/txt" },
                        mode: params.publish_dir_mode,
                        pattern: '*.txt',
                        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                    ],
                    [
                        path: { "${params.outdir}/${params.aligner}/alignment_metrics/rseqc/inner_distance/pdf" },
                        mode: params.publish_dir_mode,
                        pattern: '*.pdf'
                    ],
                    [
                        path: { "${params.outdir}/${params.aligner}/alignment_metrics/rseqc/inner_distance/rscript" },
                        mode: params.publish_dir_mode,
                        pattern: '*.r'
                    ]
                ]
            }
        }
    }

    if ('tin' in rseqc_modules && !params.bam_csi_index) {
        process {
            withName: '.*:BAM_RSEQC:RSEQC_TIN' {
                publishDir = [
                    path: { "${params.outdir}/${params.aligner}/alignment_metrics/rseqc/tin" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }
        }
    }
}

//
// stringtie
//
if (!params.skip_alignment) {
    if (!params.skip_stringtie) {
        process {
            withName: 'STRINGTIE_STRINGTIE' {
                publishDir = [
                    path: { "${params.outdir}/${params.aligner}/alignment_metrics/stringtie" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }
        }
    }
}

//
// qualimap
//

if (!params.skip_alignment && !params.skip_qc) {
    if (!params.skip_qualimap) {
        process {
            withName: 'QUALIMAP_RNASEQ' {
                publishDir = [
                    path: { "${params.outdir}/${params.aligner}/alignment_metrics/qualimap" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }
        }
    }
}

//
// bigWig coverage options - only included the ones that publish files
//
if (!params.skip_alignment && !params.skip_bigwig) {
    process {
        withName: '.*:BEDGRAPH_BEDCLIP_BEDGRAPHTOBIGWIG_FORWARD:UCSC_BEDGRAPHTOBIGWIG' {
            publishDir = [
                path: { "${params.outdir}/${params.aligner}/alignment/bigwig" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: '.*:BEDGRAPH_BEDCLIP_BEDGRAPHTOBIGWIG_REVERSE:UCSC_BEDGRAPHTOBIGWIG' {
            publishDir = [
                path: { "${params.outdir}/${params.aligner}/alignment/bigwig" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

// 
//  MUTLIQC
//

if (!params.skip_multiqc) {
    process {
        withName: 'MULTIQC' {
            publishDir = [
                path: { [
                    "${params.outdir}/metrics/multiqc",
                    params.skip_alignment? '' : "/${params.aligner}"
                    ].join('') },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}